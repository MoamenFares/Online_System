// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Online_System.Models;

namespace Online_System.Data
{
    public partial class Online_Store_Context : DbContext
    {
        public Online_Store_Context()
        {
        }

        public Online_Store_Context(DbContextOptions<Online_Store_Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Products_Order> Products_Orders { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Online_Store;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasKey(e => new { e.User_Id, e.Product_Id });

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.User_Id)
                    .HasConstraintName("FK_Cart_Users");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasOne(d => d.Parent_Category)
                    .WithMany(p => p.InverseParent_Category)
                    .HasForeignKey(d => d.Parent_Category_Id)
                    .HasConstraintName("FK_Categories_Categories");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.Customer_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Users");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.Category_Id)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Products_Categories");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.Vendor_Id)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Products_Vendors");
            });

            modelBuilder.Entity<Products_Order>(entity =>
            {
                entity.HasKey(e => new { e.Product_Id, e.Order_Id });

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Products_Orders)
                    .HasForeignKey(d => d.Order_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Order_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Products_Orders)
                    .HasForeignKey(d => d.Product_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Order_Products");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}